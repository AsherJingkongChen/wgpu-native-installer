name: CI

on:
  push:
    branches:
      - main
      - master
    tags:
      - "*"
  pull_request:

permissions:
  contents: read

jobs:
  build-and-test:
    name: "Build and Test"
    strategy:
      matrix:
        python:
          - "3.12"
          - "3.8"
        runner:
          - "macos-13"
          - "macos-14"
          - "ubuntu-22.04"
        include:
          - python: "3.11"
            runner: "ubuntu-22.04"
          - python: "3.10"
            runner: "ubuntu-22.04"
          - python: "3.9"
            runner: "ubuntu-22.04"
    env:
      PROJECT_ID: wgpu_native_installer
    runs-on: ${{ matrix.runner }}
    steps:
      - id: "platform-info"
        name: "Platform Info"
        run: "echo '${{ matrix.runner }} is running on ${{ runner.os }}-${{ runner.arch }}'"

      - id: "checkout"
        name: "Checkout"
        uses: actions/checkout@v4

      - id: "setup-python"
        name: "Setup Python"
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python }}
          cache: "pip"

      - id: "install-dependencies"
        name: "Install Dependencies"
        run: >
          python -m pip install
          --no-build-isolation
          --requirement requirements.tool.txt
          --upgrade

      - id: "organize-codes"
        name: "Organize Codes"
        run: |
          python -m isort .
          python -m black .

      - id: "build-wheels"
        name: "Build Wheels"
        run: >
          python -m pip wheel .
          --no-build-isolation
          --wheel-dir dist

      - id: "install-wheels"
        name: "Install Wheels"
        run: |
          python -m pip install dist/*

      - id: "unit-tests"
        name: "Unit Tests"
        run: |
          python -m pytest

      - id: "integration-tests"
        name: "Integration Tests"
        run: |
          python -m ${{ env.PROJECT_ID }} -V
          python -m ${{ env.PROJECT_ID }} -h

      - id: "upload-artifact"
        name: "Upload Artifact"
        uses: actions/upload-artifact@v4
        with:
          name: artifact-${{ matrix.runner }}-python-${{ matrix.python }}
          path: dist/${{ env.PROJECT_ID }}-*.*.*-*.whl
          compression-level: 1

  release-github:
    name: "Release on GitHub"
    if: startsWith(github.ref, 'refs/tags/')
    needs: [build-and-test]
    permissions:
      contents: write
    runs-on: ubuntu-latest
    steps:
      - id: "download-artifact"
        name: "Download Artifact"
        uses: actions/download-artifact@v4
        with:
          path: dist
          merge-multiple: true

      - id: "publish"
        name: "Publish"
        uses: softprops/action-gh-release@v2
        with:
          files: dist/*
          token: ${{ secrets.GITHUB_TOKEN }}

  release-pypi:
    name: "Release on PyPI"
    if: startsWith(github.ref, 'refs/tags/')
    needs: [build-and-test]
    runs-on: ubuntu-latest
    steps:
      - id: "download-artifact"
        name: "Download Artifact"
        uses: actions/download-artifact@v4
        with:
          path: dist
          merge-multiple: true

      - id: "publish"
        name: "Publish"
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          user: __token__
          password: ${{ secrets.PYPI_API_TOKEN }}
          packages-dir: dist
          repository-url: https://upload.pypi.org/legacy/
